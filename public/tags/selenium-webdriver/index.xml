<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Selenium Webdriver on Testing, Automation, Programming and Latest Technology Articles</title>
    <link>https://www.pawangaria.com/tags/selenium-webdriver/</link>
    <description>Recent content in Selenium Webdriver on Testing, Automation, Programming and Latest Technology Articles</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>pawangaria@gmail.com (Pawan Garia)</managingEditor>
    <webMaster>pawangaria@gmail.com (Pawan Garia)</webMaster>
    <lastBuildDate>Sat, 27 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.pawangaria.com/tags/selenium-webdriver/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scalable Selenoid Grid as an alternative for Selenium Grid</title>
      <link>https://www.pawangaria.com/post/docker/selenoid-as-alternative-selenium-grid-with-docker/</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/docker/selenoid-as-alternative-selenium-grid-with-docker/</guid>
      <description>In past articles, we learned about a simple approach to building scalable Selenium Grid cluster using Docker and selenium images in the virtual machines. But this article is more about building an improved and very easy scalable selenium Grid using an open source project named Selenoid with Docker.
How Selenoid is different from Selenium Grid: The main idea behind Selenoid is to start short-lived container for each Selenium session with a requested browser and stop it immediately when the session is closed from the Test.</description>
    </item>
    
    <item>
      <title>Selenium Grid setup using Docker-compose.yml</title>
      <link>https://www.pawangaria.com/post/docker/docker-compose-in-selenium-grid/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/docker/docker-compose-in-selenium-grid/</guid>
      <description>In our last Article, we learned steps to create Selenium Grid using Docker. In our article, we used all the steps from the command line. Now there is a better way to setup Grid using docker-compose file. Using the Docker compose file It&amp;rsquo;s very easy to up and down and scale our grid by just running the File.
#What is Docker-Compose File? Compose is a tool for defining and running multi-container Docker applications.</description>
    </item>
    
    <item>
      <title>Setup Selenium WebDriver Grid with Docker</title>
      <link>https://www.pawangaria.com/post/docker/selenium-webdriver-grid-with-docker/</link>
      <pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/docker/selenium-webdriver-grid-with-docker/</guid>
      <description>Integration tests are an integral part of any modern web application, you&amp;rsquo;ll likely be running selenium tests. While Selenium tests are easy to write and execute on your local workstation. Now you&amp;rsquo;re stuck with two options like SaaS provider like SauceLabs and BrowserStack etc. or running your own Selenium Grid on multiple machines and managing a multitude of machines and browser versions. This is going to make you CI process with slow builds.</description>
    </item>
    
    <item>
      <title>Debugging Docker Container with RealVNC Viewer</title>
      <link>https://www.pawangaria.com/post/docker/debugging-docker-container-with-realvnc/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/docker/debugging-docker-container-with-realvnc/</guid>
      <description>In our last article, we talked about basics of running automation Test on Docker. Now, this article is more about debugging the Test running on the containers. It&amp;rsquo;s helpful when you want to see what is happening inside the docker container. In the event you wish to visually see what the browser is doing you will want to run the debug variant of the node or standalone images. A VNC server will run on particular port inside the container with Selenium WebDriver.</description>
    </item>
    
    <item>
      <title>Getting Started - Docker with Selenium WebDriver</title>
      <link>https://www.pawangaria.com/post/docker/how-to-use-docker-with-webdriver/</link>
      <pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/docker/how-to-use-docker-with-webdriver/</guid>
      <description>What is Docker? Docker containers allow you to package up an application with all the basic parts to run, such as libraries and other dependencies, and ship it out as one package.
Developers use Docker to eliminate “works on my machine” problems when collaborating on code with co-workers. Companies use Docker to build agile software delivery pipelines to ship new features faster, more securely and with confidence for both Linux and Windows Server.</description>
    </item>
    
    <item>
      <title>Browser Automation from CommandLine using Curl and ChromeDriver</title>
      <link>https://www.pawangaria.com/post/automation/browser-automation-from-command-line/</link>
      <pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/automation/browser-automation-from-command-line/</guid>
      <description>Browser automation from command-line is possible after the release of HTTP servers like ChromeDriver, GeckoDriver which are implementing the W3C WebDriver standard and follow all the standards of a normal server-client architecture in HTTP.
In my other posts, I have described what is JSONWire Protocol and how it became a standard for the browser automation. I also described how we can perform browser automation using postman tool. Now in this article, I will show you how we can use simple curl HTTP commands to drive Chrome Browser.</description>
    </item>
    
    <item>
      <title>How ChromeDriver works in the background?</title>
      <link>https://www.pawangaria.com/post/automation/how-chromedriver-works-in-background/</link>
      <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/automation/how-chromedriver-works-in-background/</guid>
      <description>ChromeDriver is a Chromium project and ChromeDriver code is inside the Chromium repository. Chromium is an open source project started by Google to provide source code for Chrome browser. Chromium projects are divided into mainly two projects Chromium browser and Chromium OS which is an open source project for OS based browsers, you can watch What is Chrome OS Video for more information.
Chromium dev teams are now responsible for the maintenance of the ChromeDriver code and updates which we use with Selenium WebDriver for automating Chrome.</description>
    </item>
    
    <item>
      <title>Browser automation using ChromeDriver and Postman</title>
      <link>https://www.pawangaria.com/post/automation/browser-automation-using-chromedriver-and-postman/</link>
      <pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/automation/browser-automation-using-chromedriver-and-postman/</guid>
      <description>If you are using WebDriver or learning how to use Selenium for test automation, you must be using some programming language like Java or PHP, etc. for automation and performing actions on browsers like Chrome. But in this article we are not going to use WebDriver Client Like Java or PHP, etc. and we will perform actions like open URL, Click Button or Enter Text using ChromeDriver and PostMan tool.</description>
    </item>
    
    <item>
      <title>How to use ChromeDriver with Selenium WebDriver?</title>
      <link>https://www.pawangaria.com/post/automation/how-to-use-chromedriver-with-selenium-webdriver/</link>
      <pubDate>Tue, 05 Dec 2017 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/automation/how-to-use-chromedriver-with-selenium-webdriver/</guid>
      <description>ChromeDriver is a separate executable which can be used by all the Client libraries to Automate and control Chrome Browser. ChromeDriver implements all the standard for the WebDriver which is JSON WireProtocol and communicates based on those protocols. It receives HTTP request and provides HTTP response to the Client. ChromeDriver is not client dependent and separate from the clients like Java, Python, PHP etc. You can use the same ChromeDriver with any of the programming languages as the client.</description>
    </item>
    
    <item>
      <title>What is RemoteWebDriver in Selenium WebDriver?</title>
      <link>https://www.pawangaria.com/post/automation/what-is-remotewebdriver-in-seleniumwebdriver/</link>
      <pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/automation/what-is-remotewebdriver-in-seleniumwebdriver/</guid>
      <description>What is RemoteWebDriver? RemoteWebDriver in Selenium Webdriver implements each of the JSONWireProtocol commands and maps them into an action that can be performed on a remote machine.
RemoteWebDriver is a Class in the package org.openqa.selenium.remote inside the Client Project of WebDiver. RemoteWebDriver.class implements multiple interface like WebDriver(Yes WebDriver is an Interface not a Class as I have seen many people confused about this information), FindsById, FindsByClassName, FindsByLinkText etc.
package org.</description>
    </item>
    
    <item>
      <title>How Selenium-WebDriver API commands work?</title>
      <link>https://www.pawangaria.com/post/automation/how-selenium-webdriver-api-commands-work/</link>
      <pubDate>Sun, 03 Dec 2017 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/automation/how-selenium-webdriver-api-commands-work/</guid>
      <description>Selenium WebDriver provides cool interface API&amp;rsquo;s to perform many actions on the browser and simulate the user behaviors like the click or enter Text in the TextBoxes. There are many good articles about the WebDriver on the internet but the purpose of this article is to understand what happens in the background when we use actions like click, finding an element or getting title etc. I will be using Java as a programming language in this article.</description>
    </item>
    
    <item>
      <title>Understanding the Architecture of Selenium WebDriver</title>
      <link>https://www.pawangaria.com/post/automation/selenium-webdriver-architecture-using-json-wire-protocol/</link>
      <pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/automation/selenium-webdriver-architecture-using-json-wire-protocol/</guid>
      <description>Selenium WebDriver provides a programming interface for driving the browser for automation testing. You can find the introduction of WebDriver in my other article. This article is more about the architecture and understanding how selenium WebDriver uses JSON Wire Protocol.
JSON Wire Protocol is an abstract specification of how automation behavior like clicking or typing or whatever you actually want to do with your automation script is mapped to selenium or appium or HTTP requests and response.</description>
    </item>
    
    <item>
      <title>What is Selenium WebDriver?</title>
      <link>https://www.pawangaria.com/post/automation/what-is-selenium-webdriver/</link>
      <pubDate>Tue, 28 Nov 2017 12:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/automation/what-is-selenium-webdriver/</guid>
      <description>Selenium WebDriver is an open source application for driving browsers for automation testing. Using WebDriver libraries you can drive the browser and perform actions like Click, Open URL, Enter Text, Clear Text, Take Screenshot of browser and many more actions. WebDriver works on a very simple principle of Client Server architecture. The communication between the server and client is through HTTP request and response.
WebDriver uses JSON wire protocol works on RESTful Web Services over HTTP.</description>
    </item>
    
  </channel>
</rss>