<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on Testing, Automation, Programming and Latest Technology Articles</title>
    <link>https://www.pawangaria.com/categories/tutorials/</link>
    <description>Recent content in Tutorials on Testing, Automation, Programming and Latest Technology Articles</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>pawangaria@gmail.com (Pawan Garia)</managingEditor>
    <webMaster>pawangaria@gmail.com (Pawan Garia)</webMaster>
    <lastBuildDate>Thu, 17 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.pawangaria.com/categories/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Limit certain Test Iterations in TestNG @DataProvider</title>
      <link>https://www.pawangaria.com/post/testng/limit-certain-test-iterations-in-testng-dataprovider/</link>
      <pubDate>Thu, 17 Sep 2020 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/testng/limit-certain-test-iterations-in-testng-dataprovider/</guid>
      <description>Recently while working on one of the projects we were required to limit the number of data set provided from the TestNG DataProvider and Run for example only the first 10 Testcases and skip all others to quick run the @Test. As we are using the TestNG @DataProvider to send the Test Data and the count of the Test Data set provided from the Data Provider is generally more than 100.</description>
    </item>
    
    <item>
      <title>Write REST Assured request and response to the log file</title>
      <link>https://www.pawangaria.com/post/api/write-restassured-request-and-response-to-log-file/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/api/write-restassured-request-and-response-to-log-file/</guid>
      <description>Testing and validating REST services in any application are hard and confusing, especially in java. REST Assured brings the simplicity as we can easily use REST Assured Java API&amp;rsquo;S to send the Request and then validate anything from the response.
But while doing this simple request and response I face the problem now and again is how to configure REST Assured logs to be written to some file or test logs instead of printed to the console.</description>
    </item>
    
    <item>
      <title>Git: Changing Last Commit Using --amend.</title>
      <link>https://www.pawangaria.com/post/git/changing-last-commit-in-git/</link>
      <pubDate>Wed, 28 Mar 2018 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/git/changing-last-commit-in-git/</guid>
      <description>This tutorial will cover various methods of rewriting and altering Git history. Git uses a few different methods to record changes. If you ever find that you accidentally left something out of your last commit, be it a file or an extra change to a file that you just committed, don&amp;rsquo;t worry. It can easily be fixed using the git commit --amend.
The git commit &amp;ndash;amend command is a convenient way to modify the most recent commit.</description>
    </item>
    
    <item>
      <title>Object Oriented Programming Principles and Concepts Explained!</title>
      <link>https://www.pawangaria.com/post/java/object-oriented-programming-concepts/</link>
      <pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/java/object-oriented-programming-concepts/</guid>
      <description>What is an object? Object-oriented languages follow a different programming pattern from structured programming languages like C and COBOL. The Java language is not completely an object-oriented. The structured-programming paradigm is highly data-oriented: You have data structures, and then program instructions act on that data. Object-oriented languages such as the Java language combine data and program instructions into objects.
An object is a self-contained entity that contains attributes and behavior. Instead of having a data structure with fields (attributes) and passing that structure around to all the program logic that acts on it (behavior), in an object-oriented language, data and program logic are combined.</description>
    </item>
    
    <item>
      <title>Remove Retried Failed Test from TestNG Report!</title>
      <link>https://www.pawangaria.com/post/testng/remove-retried-test-from-testng-report/</link>
      <pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/testng/remove-retried-test-from-testng-report/</guid>
      <description>Sometimes back I wrote an article about running the failed test again using IRetryAnalyzer in TestNG. You can read about How to Retry failed tests in TestNG ?. Retrying the failed Test again creates the problem of having duplicate entries for retried tests in TestNG reports. So when a failed test is being retired and is ends as successful or failed after multiple retry, there are multiple entries in the report with all the retried @Test&amp;rsquo;s considered as Skipped Test and then the final result will looks like the below report.</description>
    </item>
    
    <item>
      <title>How TestNG works in the Background?</title>
      <link>https://www.pawangaria.com/post/testng/how-testng-works-in-background/</link>
      <pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/testng/how-testng-works-in-background/</guid>
      <description>TestNG is widely used Test Management Framework these days mostly used with Selenium WebDriver and Unit Testing. This article will try to Run the testNG from simple Java program and try to figure out the architecture of TestNG. We will see what happens in the background when you run your Test.
Running TestNG from Java program: This example creates a TestNG object and runs the @test class TestClass then we will try to add some TestListener int he same Java code.</description>
    </item>
    
    <item>
      <title>How to Retry failed tests in TestNG?</title>
      <link>https://www.pawangaria.com/post/testng/retry-failed-test-in-testng/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/testng/retry-failed-test-in-testng/</guid>
      <description>In automation Test Suits or running test cases in a bulk suite, we face unexpected Test failure or flaky test caused by network glitch, time-out or some other problem. There is a need for running the failed test cases so that we can get the proper result for the flaky TestCase.
 TestNG provides IRetryAnalyzer interface which can be used to run and configure your retry related logic.
 How to use IRetryAnalyzer: First of all, we should create a class which implements the IRetryAnalyzer interface which has one method public boolean retry(ITestResult result); which needs to be implemented.</description>
    </item>
    
    <item>
      <title>How to pass parameters from testng.xml file in TestNG</title>
      <link>https://www.pawangaria.com/post/testng/how-pass-parameters-from-testng-xml/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/testng/how-pass-parameters-from-testng-xml/</guid>
      <description>TestNG lets you pass parameters directly to your test methods from the testng.xml file. Passing parameters from the XML file is important when you want to pass configurations like browser name, version,test-URL etc. directly into your Test. Passing these configurations is important because the values are changing and should be always dynamic.
 Passing Dynamic configuration values from testng.xml is important when you want to change parameters like browser or version or operatingSystem etc.</description>
    </item>
    
    <item>
      <title>Executing Parallel Tests in TestNG</title>
      <link>https://www.pawangaria.com/post/testng/executing-parallel-tests-in-testng/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/testng/executing-parallel-tests-in-testng/</guid>
      <description>TestNG allows the tests to run in parallel or multi-threaded mode. Parallel test are helpfull for reduction in test execution time.TestNG use the concept of multi-threading from Java. In the configuration file, the parallel attribute on the tag us been used for the parallel execution using the testng.xml file. Example:
&amp;lt;suite name=&amp;#34;Suite&amp;#34; parallel=&amp;#34;methods&amp;#34; thread-count=&amp;#34;2&amp;#34; configfailurepolicy=&amp;#34;continue&amp;#34;&amp;gt; Parallel attribute take multiple values, Below are the valid values:
 parallel= methods : Run all your test methods in separate threads.</description>
    </item>
    
    <item>
      <title>How to use TestNG Listeners?</title>
      <link>https://www.pawangaria.com/post/testng/how-to-use-testng-listeners/</link>
      <pubDate>Sat, 30 Dec 2017 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/testng/how-to-use-testng-listeners/</guid>
      <description>Listeners listen to the event defined in the Test Scripts and behave accordingly. The main purpose of using listeners is to create logs for debugging but we can also manage Listeners for Test Framework Design.
What are TestNG Listeners? In Simple words, they are basically Java classes, which implement some TestNG Interfaces. So that when TestNG raises certain events like Test starting, Test Failure etc. TestNG will look for all Classes which are basically looking for such events and call the respective event handlers.</description>
    </item>
    
    <item>
      <title>How to use DataProvider in TestNG?</title>
      <link>https://www.pawangaria.com/post/testng/how-to-use-dataprovider-in-testng/</link>
      <pubDate>Thu, 28 Dec 2017 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/testng/how-to-use-dataprovider-in-testng/</guid>
      <description>There are multiple cases, when we have to validate our use-cases where the logic should be same but the test data is different and we must validate our logic for multiple parameters. TestNG provides a very easy way of passing parameters using the DataProvider. In this article we are going to learn how to use DataProvider with @Test.
 A Data Provider is a method on your class that returns an array of array of objects.</description>
    </item>
    
    <item>
      <title>How to use Dependencies in TestNG?</title>
      <link>https://www.pawangaria.com/post/testng/how-to-use-dependencies-in-testng/</link>
      <pubDate>Wed, 27 Dec 2017 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/testng/how-to-use-dependencies-in-testng/</guid>
      <description>Sometimes we have steps or tests which are depended on each other and can not be performed alone. For example: To update Facebook account details, User should be logged in already.I personally do not recommend making test cases dependent upon each other and should be independent.
To make dependencies between test, TestNG provides dependsOnMethods or dependsOnGroups attributes which can be used in the @Test. As per the TestNg documentation, there are two types of dependencies:</description>
    </item>
    
    <item>
      <title>How to run multiple Test Classes in TestNG?</title>
      <link>https://www.pawangaria.com/post/testng/how-to-run-multiple-class-in-testng/</link>
      <pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/testng/how-to-run-multiple-class-in-testng/</guid>
      <description>In TestNG, we can divide our test cases into multiple classes. Every class can have multiple @test methods.Sometimes Class represents a particular feature and all the test cases are inside the class. So in this article, we are going to learn how we can run multiple tests having multiple classes in TestNG.
Lets make few example test Classes: We will first make few Test Class with multiple @Test. To run all the Classes we should create a testng.</description>
    </item>
    
    <item>
      <title>How to Enable and Disable @Test in TestNG</title>
      <link>https://www.pawangaria.com/post/testng/enable-and-disable-test-in-testng/</link>
      <pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/testng/enable-and-disable-test-in-testng/</guid>
      <description>TestNG provides an attribute for enabling and disable our @Test. There are many times when you don&amp;rsquo;t want to run particular @Test and it&amp;rsquo;s not a better way to remove the whole Test method from the class and then add again if you want to run the @Test again.
 By default all the TestNG @Test methods are Enabled
 How to Enable and Disable @Test: To enable and disable @test, There is an attribute enabled which accepts Boolean type value as True or False.</description>
    </item>
    
    <item>
      <title>How to Skip @Test in TestNG</title>
      <link>https://www.pawangaria.com/post/testng/how-to-skip-test-in-testng/</link>
      <pubDate>Wed, 20 Dec 2017 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/testng/how-to-skip-test-in-testng/</guid>
      <description>Skipping test is also an important concept in TestNG. You can skip the test from running as you don&amp;rsquo;t want to Run the @test and mark the @test as Skip in reports.
To Skip the test we need to use org.testng.SkipException an Exception Class from TestNG. We have to throw an exception to the first line and code will come out from the test. You can have a look at Java document to read more about exception throwing.</description>
    </item>
    
    <item>
      <title>Expected Exceptions in TestNG</title>
      <link>https://www.pawangaria.com/post/testng/expected-exception-in-testng/</link>
      <pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/testng/expected-exception-in-testng/</guid>
      <description>All exceptions are not bad in our product, means we have to test and verify the exceptions in our product. The ExpectedException is a way of verifying that your code throws a specific exception.
 Verifying that code completes normally is important, but making sure the logic behaves as expected in failure and unexpected situations are also important.
 In TestNG, we have an attribute as expectedExceptions which needs to be added to our test where we have to verify the Exception as expected.</description>
    </item>
    
    <item>
      <title>TestNG Results: Success, Failure and Assert</title>
      <link>https://www.pawangaria.com/post/testng/testng-test-results/</link>
      <pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/testng/testng-test-results/</guid>
      <description>In testing Test is considered successful if it completed without throwing an exception or test successfully validated expected results. Sometimes @test threw an exception that was expected and we mark test as success. TestNG can not just decide what should be the results of the Test by himself, So we need to provide the expected data and expected conditions.
TestNG use the concept of Assert from Java and can be used for adding validation and conditions in your test cases.</description>
    </item>
    
    <item>
      <title>What is the TestNG.xml file?</title>
      <link>https://www.pawangaria.com/post/testng/what-is-testng-xml-file/</link>
      <pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/testng/what-is-testng-xml-file/</guid>
      <description>TestNG.xml file is an XML file which contains all the Test configuration and this XML file can be used to run and organize our test. TestNG eclipse plugin can be used to automatically generate testng.xml file so no need to write from scratch. In this article, we are going to learn about what is testng.xml and how to use testng.xml file to run our test.
Create Class with multiple @test methods: First, we need to create a simple class which contains multiple @test methods.</description>
    </item>
    
    <item>
      <title>What are TestNG Annotations?</title>
      <link>https://www.pawangaria.com/post/testng/what-are-testng-annotations/</link>
      <pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/testng/what-are-testng-annotations/</guid>
      <description>Before talking about annotations we should talk a little bit about why TestNG is required and what is the need for using any test management frameworks in our test.
All the tests are designed to allow you to quickly verify your application using a very large and diverse set of different data inputs. So test management tools are responsible for managing our test and provide many functionalities or you can say methods we can directly use in Test and no need to write the logic again like comparing two objects, pre-setup for Test, passing a different set of data and many more.</description>
    </item>
    
    <item>
      <title>What is TestNG?</title>
      <link>https://www.pawangaria.com/post/testng/what-is-testng/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      <author>pawangaria@gmail.com (Pawan Garia)</author>
      <guid>https://www.pawangaria.com/post/testng/what-is-testng/</guid>
      <description>TestNG is a test management framework inspired from JUnit and NUnit frameworks. TestNG provided and introduced new functionalities and features which make TestNg very powerful and mostly used test management framework in Java programming language. As per the creator of TestNG Mr. Cédric Beust NG stands for next generation.
TestNG can be used in all the phases of testing like Unit testing, integration testing or system testing. TestNG provides better support compare to Junit and other frameworks as the new release and bug fixes are very frequent compared to Junit.</description>
    </item>
    
  </channel>
</rss>